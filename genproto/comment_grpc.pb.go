// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: comment.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ComentService_CreateComent_FullMethodName = "/forum_protos.ComentService/CreateComent"
	ComentService_GetComent_FullMethodName    = "/forum_protos.ComentService/GetComent"
	ComentService_UpdateComent_FullMethodName = "/forum_protos.ComentService/UpdateComent"
	ComentService_DeleteComent_FullMethodName = "/forum_protos.ComentService/DeleteComent"
	ComentService_GetComents_FullMethodName   = "/forum_protos.ComentService/GetComents"
)

// ComentServiceClient is the client API for ComentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComentServiceClient interface {
	CreateComent(ctx context.Context, in *CommentCreate, opts ...grpc.CallOption) (*Comment, error)
	GetComent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Comment, error)
	UpdateComent(ctx context.Context, in *CommentCreate, opts ...grpc.CallOption) (*Comment, error)
	DeleteComent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetComents(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*Comments, error)
}

type comentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComentServiceClient(cc grpc.ClientConnInterface) ComentServiceClient {
	return &comentServiceClient{cc}
}

func (c *comentServiceClient) CreateComent(ctx context.Context, in *CommentCreate, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, ComentService_CreateComent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comentServiceClient) GetComent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, ComentService_GetComent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comentServiceClient) UpdateComent(ctx context.Context, in *CommentCreate, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, ComentService_UpdateComent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comentServiceClient) DeleteComent(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ComentService_DeleteComent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comentServiceClient) GetComents(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*Comments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comments)
	err := c.cc.Invoke(ctx, ComentService_GetComents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComentServiceServer is the server API for ComentService service.
// All implementations must embed UnimplementedComentServiceServer
// for forward compatibility
type ComentServiceServer interface {
	CreateComent(context.Context, *CommentCreate) (*Comment, error)
	GetComent(context.Context, *ById) (*Comment, error)
	UpdateComent(context.Context, *CommentCreate) (*Comment, error)
	DeleteComent(context.Context, *ById) (*Void, error)
	GetComents(context.Context, *CommentFilter) (*Comments, error)
	mustEmbedUnimplementedComentServiceServer()
}

// UnimplementedComentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComentServiceServer struct {
}

func (UnimplementedComentServiceServer) CreateComent(context.Context, *CommentCreate) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComent not implemented")
}
func (UnimplementedComentServiceServer) GetComent(context.Context, *ById) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComent not implemented")
}
func (UnimplementedComentServiceServer) UpdateComent(context.Context, *CommentCreate) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComent not implemented")
}
func (UnimplementedComentServiceServer) DeleteComent(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComent not implemented")
}
func (UnimplementedComentServiceServer) GetComents(context.Context, *CommentFilter) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComents not implemented")
}
func (UnimplementedComentServiceServer) mustEmbedUnimplementedComentServiceServer() {}

// UnsafeComentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComentServiceServer will
// result in compilation errors.
type UnsafeComentServiceServer interface {
	mustEmbedUnimplementedComentServiceServer()
}

func RegisterComentServiceServer(s grpc.ServiceRegistrar, srv ComentServiceServer) {
	s.RegisterService(&ComentService_ServiceDesc, srv)
}

func _ComentService_CreateComent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComentServiceServer).CreateComent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComentService_CreateComent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComentServiceServer).CreateComent(ctx, req.(*CommentCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComentService_GetComent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComentServiceServer).GetComent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComentService_GetComent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComentServiceServer).GetComent(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComentService_UpdateComent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComentServiceServer).UpdateComent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComentService_UpdateComent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComentServiceServer).UpdateComent(ctx, req.(*CommentCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComentService_DeleteComent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComentServiceServer).DeleteComent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComentService_DeleteComent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComentServiceServer).DeleteComent(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComentService_GetComents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComentServiceServer).GetComents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComentService_GetComents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComentServiceServer).GetComents(ctx, req.(*CommentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// ComentService_ServiceDesc is the grpc.ServiceDesc for ComentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forum_protos.ComentService",
	HandlerType: (*ComentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComent",
			Handler:    _ComentService_CreateComent_Handler,
		},
		{
			MethodName: "GetComent",
			Handler:    _ComentService_GetComent_Handler,
		},
		{
			MethodName: "UpdateComent",
			Handler:    _ComentService_UpdateComent_Handler,
		},
		{
			MethodName: "DeleteComent",
			Handler:    _ComentService_DeleteComent_Handler,
		},
		{
			MethodName: "GetComents",
			Handler:    _ComentService_GetComents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
